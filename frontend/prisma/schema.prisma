
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  phoneE164          String   @unique
  phoneHash          String   @unique
  pepper             String?
  walletAddress      String   @unique
  encryptedPrivKey   String   // AES-encrypted private key (never store raw)
  dekPublicKey       String?  // optional: store DEK public
  dekEncrypted       String?  // optional: store encrypted DEK if you want
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  transactions       Transaction[]
  referrals          Referral[]
  usedReferrals      Referral[] @relation("UsedReferrals")
  referralUsages     ReferralUsage[]
  points             UserPoints[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  txHash      String   @unique
  fromAddress String
  toAddress   String
  amount      String   // Store as string to avoid precision issues
  donation    String   // 1% donation amount
  userId      Int
  blockNumber BigInt?
  status      String   @default("pending") // pending, success, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

model Referral {
  id          Int      @id @default(autoincrement())
  name        String   @default("Unknown Service") // Service name like "Perplexity", "Comet", "Claude"
  code        String   @unique
  userId      Int
  usedBy      Int?     // User ID of who used this referral code
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  maxUsage    Int?     // Optional: limit how many times code can be used
  reward      String?  // Optional: reward amount or type
  category    String   @default("general")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  usedByUser  User?    @relation("UsedReferrals", fields: [usedBy], references: [id])
  usages      ReferralUsage[]
  points      UserPoints[]
}

model ReferralUsage {
  id         Int      @id @default(autoincrement())
  referralId Int
  userId     Int
  usedAt     DateTime @default(now())
  
  // Relations
  referral   Referral @relation(fields: [referralId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model UserPoints {
  id          Int      @id @default(autoincrement())
  userId      Int
  points      Int
  source      String   // 'referral_usage', 'referral_created', etc.
  description String?
  referralId  Int?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  referral    Referral? @relation(fields: [referralId], references: [id])
}



